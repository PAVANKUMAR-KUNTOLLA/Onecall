{"version":3,"sources":["webpack:///./src/views/Auth/ResetPasswordView.js","webpack:///./src/components/Page.js","webpack:///./src/components/CustomAlert.js"],"names":["useStyles","makeStyles","theme","root","backgroundColor","palette","background","dark","height","paddingBottom","spacing","paddingTop","position","logo","_defineProperty","width","padding","breakpoints","down","submitProgress","top","left","marginTop","marginLeft","ResetPasswordView","_ref","match","classes","params","useNavigate","useParams","_useState2","_slicedToArray","useState","isAlert","alertTitle","alertText","severity","showAlert","setShowAlert","React","createElement","Page","className","title","CustomAlert","open","onClose","Box","display","flexDirection","justifyContent","Container","maxWidth","alignItems","marginBottom","Formik","initialValues","password","passwordConfirmation","validationSchema","Yup","shape","required","matches","when","is","val","length","then","oneOf","onSubmit","values","_ref2","setSubmitting","resetForm","url","Api","resetPassword","data","uidb64","token","config","headers","Cookies","get","axios","post","res","status","error","console","log","_ref3","errors","handleBlur","handleChange","handleSubmit","isSubmitting","touched","autoComplete","mb","Typography","color","variant","TextField","Boolean","fullWidth","helperText","label","margin","name","onBlur","onChange","type","value","my","Button","disabled","size","CircularProgress","Link","component","RouterLink","to","forwardRef","ref","children","_ref$title","rest","_objectWithoutProperties","_excluded","_extends","Helmet","propTypes","PropTypes","node","isRequired","string","boxShadow","alertContainer","minWidth","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","Alert","AlertTitle","prototype","bool","func"],"mappings":"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","file":"ResetPasswordView.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useParams, Link as RouterLink, useNavigate } from \"react-router-dom\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Container,\r\n  Link,\r\n  TextField,\r\n  Typography,\r\n  CircularProgress,\r\n} from \"@mui/material\";\r\n\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport CustomAlert from \"../../components/CustomAlert\";\r\n\r\nimport * as Yup from \"yup\";\r\nimport { Formik } from \"formik\";\r\nimport Cookies from \"js-cookie\";\r\nimport axios from \"axios\";\r\nimport Api from \"../../components/Api\";\r\n\r\nimport Page from \"../../components/Page\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    backgroundColor: theme.palette.background.dark,\r\n    height: \"100%\",\r\n    paddingBottom: theme.spacing(3),\r\n    paddingTop: theme.spacing(3),\r\n    position: \"relative\",\r\n  },\r\n\r\n  logo: {\r\n    width: 150,\r\n    padding: 10,\r\n    [theme.breakpoints.down(\"sm\")]: {\r\n      width: 110,\r\n    },\r\n  },\r\n  submitProgress: {\r\n    position: \"absolute\",\r\n    top: \"50%\",\r\n    left: \"50%\",\r\n    marginTop: -12,\r\n    marginLeft: -12,\r\n  },\r\n}));\r\n\r\nconst ResetPasswordView = ({ match }) => {\r\n  const classes = useStyles();\r\n  const navigate = useNavigate();\r\n  const params = useParams();\r\n  const [showAlert, setShowAlert] = useState({\r\n    isAlert: false,\r\n    alertTitle: \"\",\r\n    alertText: \"\",\r\n    severity: \"\",\r\n  });\r\n\r\n  return (\r\n    <Page className={classes.root} title=\"Reset Password\">\r\n      {showAlert.isAlert ? (\r\n        <CustomAlert\r\n          open={showAlert.isAlert}\r\n          severity={showAlert.severity}\r\n          alertTitle={showAlert.alertTitle}\r\n          alertText={showAlert.alertText}\r\n          onClose={() =>\r\n            setShowAlert({\r\n              isAlert: false,\r\n              alertTitle: \"\",\r\n              alertText: \"\",\r\n              severity: \"\",\r\n            })\r\n          }\r\n        />\r\n      ) : null}\r\n      <Box\r\n        display=\"flex\"\r\n        flexDirection=\"column\"\r\n        height=\"100%\"\r\n        justifyContent=\"center\"\r\n      >\r\n        <Container maxWidth=\"sm\">\r\n          <Box\r\n            display=\"flex\"\r\n            alignItems=\"center\"\r\n            justifyContent=\"center\"\r\n            marginBottom={2}\r\n          >\r\n            {/* We can place our logo here */}\r\n          </Box>\r\n          <Formik\r\n            initialValues={{\r\n              password: \"\",\r\n              passwordConfirmation: \"\",\r\n            }}\r\n            validationSchema={Yup.object().shape({\r\n              password: Yup.string()\r\n                .required(\"Please enter your password\")\r\n                .matches(\r\n                  /^.*(?=.{8,})((?=.*[!@#$%^&*()\\-_=+{};:,<.>]){1})(?=.*\\d)((?=.*[a-z]){1})((?=.*[A-Z]){1}).*$/,\r\n                  \"Password must contain at least 8 characters, one uppercase, one number and one special case character\"\r\n                ),\r\n\r\n              passwordConfirmation: Yup.string().when(\"password\", {\r\n                is: (val) => (val && val.length > 0 ? true : false),\r\n                then: Yup.string().oneOf(\r\n                  [Yup.ref(\"password\")],\r\n                  \"Both password need to be the same\"\r\n                ),\r\n              }),\r\n            })}\r\n            onSubmit={(values, { setSubmitting, resetForm }) => {\r\n              const url = Api.resetPassword;\r\n\r\n              let data = {\r\n                password: values[\"password\"],\r\n                uidb64: params.uidb64,\r\n                token: params.token,\r\n              };\r\n\r\n              const config = {\r\n                headers: {\r\n                  \"X-CSRFToken\": Cookies.get(\"csrftoken\"),\r\n                },\r\n              };\r\n\r\n              axios\r\n                .post(url, data, config)\r\n                .then((res) => {\r\n                  const { status, data } = res;\r\n                  if (status === 200) {\r\n                    setSubmitting(false);\r\n                    setShowAlert({\r\n                      isAlert: true,\r\n                      alertText: data?.[\"message\"],\r\n                      severity: \"success\",\r\n                    });\r\n                    resetForm();\r\n                  }\r\n                })\r\n                .catch((error) => {\r\n                  console.log(error);\r\n                  setSubmitting(false);\r\n                  setShowAlert({\r\n                    isAlert: true,\r\n                    alertText: \"Something went wrong\",\r\n                    severity: \"error\",\r\n                    alertTitle: \"Error\",\r\n                  });\r\n                  resetForm();\r\n                });\r\n            }}\r\n          >\r\n            {({\r\n              errors,\r\n              handleBlur,\r\n              handleChange,\r\n              handleSubmit,\r\n              isSubmitting,\r\n              touched,\r\n              values,\r\n            }) => (\r\n              <form autoComplete=\"off\" onSubmit={handleSubmit}>\r\n                <Box mb={3}>\r\n                  <Typography color=\"textPrimary\" variant=\"h2\">\r\n                    Reset Password\r\n                  </Typography>\r\n                </Box>\r\n                <TextField\r\n                  error={Boolean(touched.password && errors.password)}\r\n                  fullWidth\r\n                  helperText={touched.password && errors.password}\r\n                  label=\"Password\"\r\n                  margin=\"normal\"\r\n                  name=\"password\"\r\n                  onBlur={handleBlur}\r\n                  onChange={handleChange}\r\n                  type=\"password\"\r\n                  value={values.password}\r\n                  variant=\"outlined\"\r\n                />\r\n                <TextField\r\n                  error={Boolean(\r\n                    touched.passwordConfirmation && errors.passwordConfirmation\r\n                  )}\r\n                  fullWidth\r\n                  helperText={\r\n                    touched.passwordConfirmation && errors.passwordConfirmation\r\n                  }\r\n                  label=\"Confirm Password\"\r\n                  margin=\"normal\"\r\n                  name=\"passwordConfirmation\"\r\n                  onBlur={handleBlur}\r\n                  onChange={handleChange}\r\n                  type=\"password\"\r\n                  value={values.passwordConfirmation}\r\n                  variant=\"outlined\"\r\n                />\r\n\r\n                <Box my={2}>\r\n                  <Button\r\n                    color=\"primary\"\r\n                    disabled={isSubmitting}\r\n                    fullWidth\r\n                    size=\"large\"\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                  >\r\n                    Reset Password\r\n                    {isSubmitting && (\r\n                      <CircularProgress\r\n                        size={24}\r\n                        className={classes.submitProgress}\r\n                      />\r\n                    )}\r\n                  </Button>\r\n                </Box>\r\n                <Typography color=\"textSecondary\" variant=\"body1\">\r\n                  Go back to{\" \"}\r\n                  <Link component={RouterLink} to=\"/login\" variant=\"h6\">\r\n                    Sign in\r\n                  </Link>\r\n                </Typography>\r\n              </form>\r\n            )}\r\n          </Formik>\r\n        </Container>\r\n      </Box>\r\n    </Page>\r\n  );\r\n};\r\n\r\nexport default ResetPasswordView;\r\n","import React, { forwardRef } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Page = forwardRef(({ children, title = \"\", ...rest }, ref) => {\r\n  return (\r\n    <div ref={ref} {...rest}>\r\n      <Helmet>\r\n        <title>{title}</title>\r\n      </Helmet>\r\n      {children}\r\n    </div>\r\n  );\r\n});\r\n\r\nPage.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n  title: PropTypes.string,\r\n};\r\n\r\nexport default Page;\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { Snackbar } from \"@mui/material\";\r\nimport { Alert, AlertTitle } from \"@mui/material\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    marginTop: theme.spacing(10),\r\n    boxShadow: \"-2px 5px 15px -2px rgba(0,0,0,0.71)\",\r\n  },\r\n  alertContainer: {\r\n    minWidth: 350,\r\n  },\r\n}));\r\n\r\nconst CustomAlert = ({ open, severity, alertTitle, alertText, onClose }) => {\r\n  let vertical = \"top\",\r\n    horizontal = \"right\";\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Snackbar\r\n      anchorOrigin={{ vertical, horizontal }}\r\n      open={open}\r\n      autoHideDuration={6000}\r\n      onClose={onClose}\r\n      className={classes.root}\r\n    >\r\n      <Alert\r\n        severity={severity}\r\n        onClose={onClose}\r\n        className={classes.alertContainer}\r\n      >\r\n        {alertTitle ? <AlertTitle>{alertTitle}</AlertTitle> : null}\r\n        {alertText}!\r\n      </Alert>\r\n    </Snackbar>\r\n  );\r\n};\r\n\r\nCustomAlert.prototype = {\r\n  open: PropTypes.bool,\r\n  severity: PropTypes.string, //['success','warning', 'error']\r\n  alertText: PropTypes.string,\r\n  alertTitle: PropTypes.string,\r\n  onClose: PropTypes.func,\r\n};\r\n\r\nexport default CustomAlert;\r\n"],"sourceRoot":""}